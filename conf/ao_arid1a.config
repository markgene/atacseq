/*
 * -------------------------------------------------
 *  Nextflow config file for running tests
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 *   nextflow run nf-core/atacseq -profile ao_proj
 */

params {
  config_profile_name = 'ao_arid1a'
  config_profile_description = "Ao's project ARID1A KO"
  cab_ref_base = '/research/rgs01/applications/hpcf/authorized_apps/cab/Automation/REF'

  max_cpus = 4
  max_memory = 6.GB
  max_time = 12.h

  // Input data
  input = "${baseDir}/assets/design_ao_arid1a.csv"

  // Genome references
  //genome = 'GRCm38'
  //save_reference = true
  fasta     = "${cab_ref_base}/Mus_musculus/Gencode/M22/GRCm38.primary_assembly.genome.fa"
  gtf       = "${cab_ref_base}/Mus_musculus/Gencode/M22/gencode.vM22.primary_assembly.annotation.gtf"
  bwa_index = "${cab_ref_base}/Mus_musculus/Gencode/M22//bwa-index/0.7.17-r1188/GRCm38.primary_assembly.genome.fa"
  blacklist = "${baseDir}/assets/blacklists/GRCm38-blacklist-cab.bed"
  mito_name = "chrM"

  // Peaks
  macs_gsize  = "1.87e9"

  // For speed to avoid CI time-out
  //fingerprint_bins = 100
}

process {
  executor = 'lsf'

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }
  clusterOptions = "-P MJ"

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }
  withName:get_software_versions {
    cache = false
  }

}